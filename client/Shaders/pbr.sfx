// Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"
#include "render_states.sl"
#include "camera_constants.sl"
#include "video_types.sl"
#include "depth.sl"
#include "pbr_constants.sl"

// Per-material resources are in group 2:
uniform Texture2D diffuseTexture : register(t15), resource_group(g2);
uniform Texture2D normalTexture : register(t16), resource_group(g2);
uniform Texture2D combinedTexture : register(t17), resource_group(g2);
uniform Texture2D emissiveTexture : register(t18), resource_group(g2);

// Resources that change few times per-frame are in group 1:
uniform Texture2D globalIlluminationTexture : register(t19), resource_group(g1);
uniform TextureCube diffuseCubemap : register(t20), resource_group(g1);
uniform TextureCube specularCubemap : register(t21), resource_group(g1);
uniform TextureCube lightingCubemap : register(t22), resource_group(g1);
uniform Texture2D videoTexture;

// Ensure that we're treating matrices as column-major. Note, this SHOULD be the default.
#pragma pack_matrix( column_major )
// TODO Disable until fully supported
//uniform StructuredBuffer<uint4> TagDataIDBuffer;
//uniform StructuredBuffer<VideoTagData2D> TagData2DBuffer;
//uniform StructuredBuffer<VideoTagDataCube> TagDataCubeBuffer;

/*
SamplerComparisonState shadowComparisonState
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
	AddressW = Clamp;
	Comparison= GREATER;
};*/ 
 
 vec4 GetShadowCoord( vec3 wpos, LightTag lightTag )
{
	vec4 proj_pos=mul (lightTag.worldToShadowMatrix, vec4(wpos,1.0));
	proj_pos/=abs(proj_pos.w);
	return proj_pos;
}

vec4 GetShadow(Texture2D videoTexture,LightTag lightTag,vec3 wpos)
{
	vec4 spos=GetShadowCoord( wpos,  lightTag );
	// Gamma-correct is necessary for now...
	vec4 coord=vec4(lightTag.shadowTexCoordOffset.xy+spos.xy*lightTag.shadowTexCoordScale.xy,spos.zw);
	vec4 depth_lookup=pow(videoTexture.SampleLevel(clampSamplerState,coord.xy,0),1.0/0.5);//.x+0.03;
	
	float fragDepth=1.0-spos.z;
	float depth=depth_lookup.y+0.001;
	float shadowed=step(fragDepth,depth);
	float f=.494952+0.021604*wpos.z;//abs(10.0*(depth-0.4243));
	if(wpos.y>0.0)
		f=fragDepth;
	float in_range=step(0.0,spos.x)*step(spos.x,1.0)*step(0.0,spos.y)*step(spos.y,1.0);
	return in_range*shadowed;
}

const float g_MinVariance=0.000001;

float ChebyshevUpperBound(vec2 Moments, float t)
{
	// One-tailed inequality valid if t > Moments.x   
	float p =step(t,Moments.x+0.00);// (t <= Moments.x);   // Compute variance.    
	float Variance = Moments.y - (Moments.x*Moments.x);
	Variance = max(Variance, g_MinVariance);
	// Compute probabilistic upper bound.    
	float d = t - Moments.x;   
	float p_max = Variance / (Variance + d*d);
	return  max(p, p_max);
}

vec4 GetVarianceShadow(Texture2D videoTexture,LightTag lightTag,vec4 spos)
{
	vec4 coord=vec4(lightTag.shadowTexCoordOffset.xy+spos.xy*lightTag.shadowTexCoordScale.xy,spos.zw);
	// Gamma-correct is not necessary for now as we've preprocessed the depth server-side...
	vec4 depth_lookup=(videoTexture.SampleLevel(clampSamplerState,coord.xy,0));//.x+0.03;
	//float depth=depth_lookup.x;//-0.01;
	float depth=depth_lookup.x;//0.75+(depth_lookup.x-0.75)/4.0;
	float D2=depth_lookup.y;
	vec2 moments=vec2(depth,D2);
	float fragDepth=1.0-spos.z;
	fragDepth=0.8+8.0*(fragDepth-0.8);
	float shadowed = ChebyshevUpperBound(moments,fragDepth);
	float shadowed2=step(fragDepth,depth);
	return vec4(shadowed,0,0,0);
}

vec3 GetSpotLighting(LightTag lightTag,vec4 spos)
{
	float radius=length(2.0*spos.xy-vec2(1.0,1.0));
	float s=saturate(spos.z)*saturate((0.7-radius)*12.0);
	return vec3(s,s,s);
}

float GetSpecular(vec4 combinedLookup)
{
	return combinedLookup.a;
}

struct vertexInputP
{
	vec3 position		: POSITION;
};

struct vertexInput_normal
{
	vec3 position		: POSITION;
	vec3 normal			: NORMAL;
};

struct vertexInput_normal_1uv
{
	vec3 position		: POSITION;
	vec3 normal			: NORMAL;
	vec2 texCoords0		: TEXCOORD0;
};

struct vertexInput_normal_tangent_1uv
{
	vec3 position		: POSITION;
	vec3 normal			: NORMAL;
	vec4 tangent		: TANGENT;
	vec2 texCoords0		: TEXCOORD0;
};

struct vertexInput_normal_tangent_2uvs
{
	vec3 position		: POSITION;
	vec3 normal			: NORMAL;
	vec4 tangent		: TANGENT;
	vec2 texCoords0		: TEXCOORD0;
	vec2 texCoords1		: TEXCOORD1;
};
struct vertexInput_full
{
	vec3 position;
	vec3 normal;
	vec4 tangent;
	vec2 texCoords0;
	vec2 texCoords1;
	vec4 lightmapScaleOffset;
	mat4 model;
};

struct vertexInputAnim
{
	vec3 position		: POSITION;
	vec3 normal			: NORMAL;
	vec4 tangent		: TANGENT;
	vec2 texCoords0		: TEXCOORD0;
	vec2 texCoords1		: TEXCOORD1;
	vec4 joints			: TEXCOORD2;
	vec4 weights		: TEXCOORD3;
	vec4 lightmapScaleOffset;
	mat4 model;
};

struct vertexOutput
{
	vec4 hPosition				: SV_POSITION;
	vec4 diffuseNormalUV		: TEXCOORD0;
	vec4 combinedEmissiveUV		: TEXCOORD1;
	vec2 lightmapUV				: TEXCOORD2;
	vec3 normal					: TEXCOORD3;
	vec3 tangent				: TEXCOORD4;
	vec3 wpos					: TEXCOORD5;
	vec3 view					: TEXCOORD6;
	vec4 clip_pos				: TEXCOORD7;
	vec4 debug_colour			: TEXCOORD8;
};

shader vertexOutput VSSolid(vertexInput_full IN)
{
	vertexOutput OUT;
	vec4 opos			=vec4(IN.position.xyz,1.0);
	vec4 wpos			=mul(opos, IN.model);

	OUT.view			=normalize(wpos.xyz-viewPosition);
	vec4 viewspace_pos	=mul(view,vec4(wpos.xyz, 1.0));
	OUT.clip_pos		=mul(proj,vec4(viewspace_pos.xyz,1.0));
	OUT.wpos = wpos.xyz;
	
	vec2 texCoords[2];
	texCoords[0]		=IN.texCoords0;
	texCoords[1]		=IN.texCoords1; 
	
	vec4 diffnorm				=vec4(texCoords[diffuseTexCoordIndex]* diffuseTexCoordsScale,texCoords[normalTexCoordIndex]* normalTexCoordsScale);
	OUT.diffuseNormalUV			=BottomUpTextureCoordinates4(diffnorm);
	vec4 ce						=vec4(texCoords[combinedTexCoordIndex],texCoords[emissiveTexCoordIndex]);
	OUT.combinedEmissiveUV		=BottomUpTextureCoordinates4(ce);
	vec2 lm						=texCoords[lightmapTexCoordIndex]*IN.lightmapScaleOffset.xy+IN.lightmapScaleOffset.zw;
	OUT.lightmapUV.xy			=BottomUpTextureCoordinates(lm);
	
#ifdef SFX_OPENGL_NONE
	OUT.normal.xyz = mul(IN.normal, mat3(IN.model));
	OUT.tangent.xyz = mul(IN.tangent, IN.model).xyz;
#else
//	must NORMALIZE, because world matrix might SCALE the normals!
	OUT.normal			= normalize(mul(vec4(IN.normal.xyz, 0.0), IN.model).xyz);
	OUT.tangent			= normalize(mul(vec4(IN.tangent.xyz,0.0), IN.model).xyz);
#endif
	OUT.hPosition		= OUT.clip_pos;
	OUT.debug_colour	= vec4(IN.position.xyz, 0);
	return OUT;
}

struct vertexInputVariant
{
	vec3 position : POSITION;
	[variant(have_normal)] vec3 normal : NORMAL;
	[variant(have_tangent)] vec4 tangent : TANGENT;
	[variant(uv_count> 0)] vec2 texCoords0 : TEXCOORD_AUTO;
	[variant(uv_count > 1)] vec2 texCoords1 : TEXCOORD_AUTO;
	[variant(have_colour)] vec4 colour : COLOR;
	[variant(have_anim)] vec4 joints : TEXCOORD_AUTO;
	[variant(have_anim)] vec4 weights : TEXCOORD_AUTO;
	[variant(instanced)] vec4 lightmapScaleOffset : TEXCOORD_AUTO;
	[variant(instanced)] mat4 model : TEXCOORD_AUTO; // uint Instance : SV_InstanceID;
};

vertexOutput VSSolidMV(vertexInput_full IN, uint viewID)
{
	vertexOutput OUT;
	
	vec4 opos			=vec4(IN.position.xyz,1.0);
	vec4 wpos			=mul(opos, IN.model);
	 
	OUT.view			=normalize(wpos.xyz-stereoViewPosition[viewID].xyz);
	vec4 viewspace_pos	=mul(viewID == 0 ? leftView : rightView, vec4(wpos.xyz, 1.0));
	OUT.clip_pos		=mul(viewID == 0 ? leftProj : rightProj, vec4(viewspace_pos.xyz,1.0));
	OUT.wpos = wpos.xyz;
	vec2 texCoords[2];
	texCoords[0]				=IN.texCoords0;
	texCoords[1]				=IN.texCoords1; 
	vec4 diffnorm				=vec4(texCoords[diffuseTexCoordIndex]*diffuseTexCoordsScale,texCoords[normalTexCoordIndex]*normalTexCoordsScale);
	OUT.diffuseNormalUV			=BottomUpTextureCoordinates4(diffnorm);
	vec4 ce						=vec4(texCoords[combinedTexCoordIndex],texCoords[emissiveTexCoordIndex]);
	OUT.combinedEmissiveUV		=BottomUpTextureCoordinates4(ce);
	vec2 lm						=texCoords[lightmapTexCoordIndex]*IN.lightmapScaleOffset.xy+IN.lightmapScaleOffset.zw;
	OUT.lightmapUV.xy			=BottomUpTextureCoordinates(lm);
#ifdef SFX_OPENGL_NONE
	OUT.normal.xyz = mul(IN.normal, mat3(IN.model));
	OUT.tangent.xyz = mul(IN.tangent, IN.model).xyz;
#else
	OUT.normal			=mul(vec4(IN.normal.xyz, 0.0), IN.model).xyz;
	OUT.tangent			=mul(vec4(IN.tangent.xyz,0.0), IN.model).xyz;
#endif
	OUT.hPosition		=OUT.clip_pos;
	OUT.debug_colour	=vec4(IN.position.xyz, 0);
	return OUT;
}



vertexOutput VSAnim(vertexInputAnim IN)  
{
	vertexOutput OUT; 
	vec4 w	=IN.weights;
	// normalize: should we REALLY have to do this?
	float W	=w.x+w.y+w.z+w.w;
	w/=W;
	mat4 boneTransform	= boneMatrices[int(IN.joints[0])] * w.x
						+ boneMatrices[int(IN.joints[1])] * w.y
						+ boneMatrices[int(IN.joints[2])] * w.z
						+ boneMatrices[int(IN.joints[3])] * w.w;
	 
	vec4 opos			= vec4(IN.position.xyz,1.0);
	vec4 bpos			= mul(opos, boneTransform);
	//mmbpos=opos;
	// boneTransform transforms between two positions in object-local space.
	vec4 wpos			= mul(bpos, IN.model);
	OUT.view			=normalize(wpos.xyz-viewPosition);
	vec4 viewspace_pos	=mul(view, vec4(wpos.xyz, 1.0));
	OUT.clip_pos		=mul(proj,vec4(viewspace_pos.xyz,1.0));
	OUT.wpos			=wpos.xyz; 
	 
	vec2 texCoords[2]={IN.texCoords0,IN.texCoords1};  
	vec4 diffnorm=vec4(texCoords[diffuseTexCoordIndex]*diffuseTexCoordsScale,texCoords[normalTexCoordIndex]*normalTexCoordsScale);
	OUT.diffuseNormalUV			=BottomUpTextureCoordinates4(diffnorm);
	vec4 combem=vec4(texCoords[combinedTexCoordIndex],texCoords[emissiveTexCoordIndex]);
	OUT.combinedEmissiveUV		=BottomUpTextureCoordinates4(combem);
	vec2 lm						= texCoords[lightmapTexCoordIndex] * IN.lightmapScaleOffset.xy + IN.lightmapScaleOffset.zw;
	OUT.lightmapUV.xy			=BottomUpTextureCoordinates(lm);
	OUT.normal.xyz = mul(mul(vec4(IN.normal, 0.0), boneTransform), IN.model).xyz;
	// OUT.normal.xyz = mul(vec4(IN.normal, 0.0), IN.model).xyz;
	//OUT.tangent.xyz = mul(mul(IN.tangent, boneTransform), world).xyz;
	OUT.tangent.xyz = mul(IN.tangent, IN.model).xyz;

	OUT.hPosition = OUT.clip_pos;
	OUT.debug_colour = IN.weights;
	return OUT;
}

vertexOutput VSAnimMV(vertexInputAnim IN, uint viewID)
{
	vertexOutput OUT;

	vec4 w = IN.weights;
	// normalize: should we REALLY have to do this?
	float W = w.x + w.y + w.z + w.w;
	w /= W;
	mat4 boneTransform = boneMatrices[int(IN.joints[0])] * w.x + boneMatrices[int(IN.joints[1])] * w.y + boneMatrices[int(IN.joints[2])] * w.z + boneMatrices[int(IN.joints[3])] * w.w;
	mat4 world = IN.model;
	vec4 opos = vec4(IN.position.xyz, 1.0);
	// boneTransform transforms between two positions in object-local space.
	vec4 bpos = mul(opos, boneTransform);
	//bpos=opos;
	vec4 wpos = mul(bpos, world);
	// vec4 wpos		= mul(opos, world);
	// vec4 wpos = mul(opos, world);

	OUT.view = normalize(wpos.xyz - stereoViewPosition[viewID].xyz);
	vec4 viewspace_pos = mul(viewID == 0 ? leftView : rightView, vec4(wpos.xyz, 1.0));
	OUT.clip_pos = mul(viewID == 0 ? leftProj : rightProj, vec4(viewspace_pos.xyz, 1.0));
	OUT.wpos = wpos.xyz;

	vec2 texCoords[2] = {IN.texCoords0, IN.texCoords1};
	vec4 diffnorm = vec4(texCoords[diffuseTexCoordIndex] * diffuseTexCoordsScale, texCoords[normalTexCoordIndex] * normalTexCoordsScale);
	OUT.diffuseNormalUV = BottomUpTextureCoordinates4(diffnorm);
	vec4 ce = vec4(texCoords[combinedTexCoordIndex], texCoords[emissiveTexCoordIndex]);
	OUT.combinedEmissiveUV = BottomUpTextureCoordinates4(ce);
	vec2 lm = texCoords[lightmapTexCoordIndex] * IN.lightmapScaleOffset.xy + IN.lightmapScaleOffset.zw;
	OUT.lightmapUV.xy = BottomUpTextureCoordinates(lm);

	OUT.normal.xyz = mul(mul(vec4(IN.normal, 0.0), boneTransform), world).xyz;
	//OUT.normal.xyz = mul(vec4(IN.normal, 0.0), world).xyz;
	OUT.tangent.xyz = mul(mul(IN.tangent, boneTransform), world).xyz;
	//OUT.tangent.xyz = mul(IN.tangent, world).xyz;

	OUT.hPosition = OUT.clip_pos;
	OUT.debug_colour = IN.weights;
	return OUT;
}


shader vertexOutput VS_DebugAnimation(idOnly IN)  
{
	vertexOutput OUT; 
	mat4 boneTransform	= boneMatrices[int(IN.vertex_id/2)];
	 
	vec4 opos			=vec4(0,0,float(IN.vertex_id),1.0);
	// boneTransform transforms between two positions in object-local space.
	vec4 wpos			=mul(mul(opos, boneTransform), perNodeConstants.model);
	OUT.view			=normalize(wpos.xyz-viewPosition);
	vec4 viewspace_pos	=mul(view, vec4(wpos.xyz, 1.0));
	OUT.clip_pos		=mul(proj,vec4(viewspace_pos.xyz,1.0));
	OUT.wpos			=wpos.xyz; 
	 
	OUT.diffuseNormalUV			=vec4(0,0,0,0);
	OUT.combinedEmissiveUV		=vec4(0,0,0,0);
	OUT.lightmapUV.xy			=vec2(0,0);
	OUT.normal					=vec3(0,0,0);
	OUT.tangent.xyz				=vec3(0,0,0);

	OUT.hPosition = OUT.clip_pos;
	OUT.debug_colour = lerp(vec4(1.0,0.5,0.0,1.0),vec4(0.0,0.25,1.0,1.0),float((IN.vertex_id%2)));
	return OUT;
}

struct colourVertexOutput
{
	vec4 hPosition	: SV_POSITION;
	vec4 colour		: TEXCOORD0;
};

shader colourVertexOutput VS_Triangle(idOnly IN)
{
	colourVertexOutput OUT;
	vec3 wpos=vec3(0,0,1.0);
	int i=int(IN.vertex_id)%int(3);
	if(i==0)
	{
		wpos.z=2.0; 
		OUT.colour=vec4(1.0,0,0,0.5);
	}
	if(i==1)
	{
		wpos.x=-.5;
		OUT.colour=vec4(0,1.0,0,0.5);
	}
	if(i==2)
	{
		wpos.x=.5;
		OUT.colour=vec4(0,0,1.0,0.5);
	}
	wpos.y=2.0;
	vec4 viewspace_pos = mul( view, vec4(wpos.xyz, 1.0));
	OUT.hPosition	=mul(proj,vec4(viewspace_pos.xyz,1.0));
	return OUT;
}
 
shader vertexOutput VS_Variants(vertexInputVariant IN, variant bool have_normal, variant bool have_tangent, variant int uv_count, variant bool have_colour,variant bool have_anim,variant bool instanced)
{
variant_if(have_anim)
	vertexInputAnim full_input;
variant_else
	vertexInput_full full_input;
variant_end
	full_input.position = IN.position;
variant_if(have_normal)
	full_input.normal = IN.normal;
variant_else
	full_input.normal = vec3(0, 0, 1.0);
variant_end
variant_if(have_tangent)
	full_input.tangent = IN.tangent;
variant_else
	full_input.tangent = vec4(0, 0, 0, 0);
variant_end
variant_if(uv_count > 0)
	full_input.texCoords0 = IN.texCoords0;
variant_else
	full_input.texCoords0 = vec2(0, 0);
variant_end
variant_if(uv_count > 1)
	full_input.texCoords1 = IN.texCoords1;
variant_else
	full_input.texCoords1 = vec2(0, 0);
variant_end
variant_if(instanced)
	full_input.model = IN.model;
	full_input.lightmapScaleOffset = IN.lightmapScaleOffset;
variant_else
	full_input.model=perNodeConstants.model;
	full_input.lightmapScaleOffset = perNodeConstants.lightmapScaleOffset;
variant_end
variant_if(have_anim)
	full_input.joints = IN.joints;
	full_input.weights = IN.weights;
	return VSAnim(full_input);
variant_else
	return VSSolid(full_input);
variant_end
}
 
shader vertexOutput VS_Variants_MV(vertexInputVariant IN, variant bool have_normal, variant bool have_tangent, variant int uv_count, variant bool have_colour, variant bool have_anim, variant bool instanced, uint viewID
									   : SV_ViewID)
{
variant_if(have_anim)
	vertexInputAnim full_input;
variant_else
	vertexInput_full full_input;
variant_end
	full_input.position = IN.position;
variant_if(have_normal)
	full_input.normal = IN.normal;
variant_else
	full_input.normal = vec3(0, 0, 1.0);
variant_end
variant_if(have_tangent)
	full_input.tangent = IN.tangent;
variant_else
	full_input.tangent = vec4(0, 0, 0, 0);
variant_end
variant_if(uv_count > 0)
	full_input.texCoords0 = IN.texCoords0;
variant_else
	full_input.texCoords0 = vec2(0, 0);
variant_end
variant_if(uv_count > 1)
	full_input.texCoords1 = IN.texCoords1;
variant_else
	full_input.texCoords1 = vec2(0, 0);
variant_end
variant_if(instanced)
	full_input.model = IN.model;
	full_input.lightmapScaleOffset = IN.lightmapScaleOffset;
variant_else
	full_input.model=perNodeConstants.model;
	full_input.lightmapScaleOffset = perNodeConstants.lightmapScaleOffset;
variant_end
variant_if(have_anim)
	full_input.joints = IN.joints;
	full_input.weights = IN.weights;
	return VSAnimMV(full_input, viewID);
variant_else
	return VSSolidMV(full_input, viewID);
variant_end
}

shader vec4 PS_Triangle(colourVertexOutput IN): SV_TARGET
{
	return IN.colour;
}

vec3 EnvBRDFApprox(vec3 specularColour, float roughness, float n_v)
{
	const vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);
	const vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);
	vec4 r = roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * n_v)) * r.x + r.y;
	vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;
	return specularColour * AB.x + AB.y;
}

float VisibilityTerm(float roughness2, float l_h)
{
	//return GeometricTerm(n_v,n_l,roughness2)/(4.0*n_v*n_l);
	return 1.0/(l_h*l_h*(1.0-roughness2)+roughness2);
/*	float m2 = roughness2;//roughness * roughness;
	float visV = n_l * sqrt(n_v * (n_v - n_v * m2) + m2);
	float visL = n_v * sqrt(n_l * (n_l - n_l * m2) + m2);
	return saturate( 0.5 / max(visV + visL, 0.00001));*/
}

float DistributionTerm(float roughness2, float n_h)
{
	float m2 = roughness2;//roughness * roughness;
	float d = (n_h * m2 - n_h) * n_h + 1.0;
	return m2 / (d * d * SIMUL_PI_F);
}

//SPECULAR
//Fresnel-Schlick
vec3 fresnel_schlick(vec3 R0, vec3 h, vec3 wi)
{
	return R0 + (1.0 - R0) * pow((1.0 - saturate(dot(h, wi))), 5.0);
}
vec3 FresnelTerm(vec3 specularColour, float v_h)
{
	vec3 fresnel = specularColour + (vec3(1.0,1.0,1.0)- specularColour) * pow((1.0 - v_h), 5.0);
	return fresnel;
}

//float RoughnessFromMip(float mip, float numMips)
//{
//	double roughness_mip_scale = 1.2;
//	double C = (3.0  + mip - numMips) / roughness_mip_scale;
//	return (float)Math.Pow(Math.Exp(C), 2.0);
//}


// double roughness_mip_scale = 1.2;
// double C = (3.0  + mip - numMips) / roughness_mip_scale;
// Exp(C)=roughness^0.5;
// C=log2(roughness^0.5)=0.5*log2(roughness)
// mip = CubemapRoughestMip+roughness_mip_scale*0.5*log2(roughness)-2.0;

float MipFromRoughness(float roughness, float CubemapRoughestMip)
{
	// Heuristic that maps roughness to mip level
	// This is done in a way such that a certain mip level will always have the same roughness, regardless of how many mips are in the texture
	// Using more mips in the cubemap just allows sharper reflections to be supported
	//float LevelFrom1x1 = CubemapRoughestMip - 1.2 * log2(roughness);
	//return  log2(roughness * 1.2) + 3.0;
	float mip = CubemapRoughestMip+1.2*0.5*log2(roughness)-2.0;
	return mip;
}


// The instantaneous properties at a specific point on a surface.
struct SurfaceProperties
{
	vec4 albedo;		// diffuse color
	vec3 normal;
	vec3 emission;
	vec3 position;
	vec3 globalIllumination;
	float roughness;
	float roughness2;
	float metallic;
	float ao;
	float specular;		// specular power in 0..1 range
	float gloss;		// specular intensity
	float alpha;		// alpha for transparencies
};


SurfaceState PreprocessSurface(vec3 viewDir,SurfaceProperties surfaceProperties)
{
	SurfaceState surfaceState;
	// Constant normal incidence Fresnel factor for all dielectrics.
	vec3 Fdielectric			= vec3(0.04,0.04,0.04);
	// Fresnel reflectance at normal incidence (for metals use albedo color).
	vec3 F0						= lerp(Fdielectric, surfaceProperties.albedo.rgb, surfaceProperties.metallic);
	// Angle between surface normal and outgoing light direction.
	float n_v					=-dot(surfaceProperties.normal,viewDir);
	if(n_v<0)
		discard;
	float cosLo					= saturate(n_v);
	surfaceState.F				= FresnelTerm(F0, cosLo);
	surfaceState.kS				= surfaceState.F;
	surfaceState.kD				= lerp(vec3(1.0, 1.0, 1.0) - surfaceState.kS, vec3(0.0, 0.0, 0.0), surfaceProperties.metallic);
	surfaceState.refl			= reflect(viewDir,surfaceProperties.normal);
	surfaceState.n_v			= saturate(n_v);
	return surfaceState;
}

vec3 KarisEnvBRDFApprox(vec3 specularColour, float roughness, float n_v)
{
	const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);
	const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);
	vec4 r = roughness * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * n_v)) * r.x + r.y;
	vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;
	return specularColour * AB.x + AB.y;
}

vec3 ZiomaEnvBRDFApprox(vec3 specularColour, float roughness, float n_v)
{
	float mult=1.0-max(roughness,n_v);
	float m3=mult*mult*mult;
	return specularColour +vec3(m3,m3,m3);
}
vec3 ConvertCubemapLookup(vec3 d)
{
	//d=-d.xzy;
	//d.y=-d.y;
	return d;
}

vec3 PBRDynamic(SurfaceState surfaceState,vec3 viewDir,SurfaceProperties surfaceProperties)
{
	float roughness_mip =  MipFromRoughness(surfaceProperties.roughness, roughestMip);
	// Sample the environment maps:
	//vec3 diffuse_env		=lerp(vec3(0.3,0.3,0.3),vec3(0.8,0.8,0.8),0.5*(1.0+surfaceProperties.normal.z));//diffuseCubemap.SampleLevel(cubeSamplerState, ConvertCubemapLookup(surfaceProperties.normal.xyz),0.0).rgb;
	//vec3 env				=lerp(vec3(0.3,0.3,0.3),vec3(0.8,0.8,0.8),0.5*(1.0+surfaceState.refl.z));//specularCubemap.SampleLevel(cubeSamplerState,ConvertCubemapLookup(surfaceState.refl.xyz), roughness_mip).rgb;

	vec3 diffuse_env		=diffuseCubemap.SampleLevel(cubeSamplerState, ConvertCubemapLookup(surfaceProperties.normal.xyz),0.0).rgb;
	vec3 env				=specularCubemap.SampleLevel(cubeSamplerState,ConvertCubemapLookup(surfaceState.refl.xyz), roughness_mip).rgb;

	//vec3 envSpecularColour	= ZiomaEnvBRDFApprox(surfaceProperties.albedo, surfaceProperties.roughness2, surfaceState.n_v);
	vec3 specular			=surfaceState.kS* env;

	 //Metallic materials will have no diffuse output.
	vec3 diffuse			= surfaceState.kD*surfaceProperties.albedo.rgb*diffuse_env;
	diffuse					*= surfaceProperties.ao;
	vec3 colour				= diffuse+ specular;
	//colour.r=roughestMip;
	return colour;
}

vec3 PBRLightmap(SurfaceState surfaceState, vec3 viewDir, SurfaceProperties surfaceProperties)
{
	float roughness_mip = MipFromRoughness(surfaceProperties.roughness, roughestMip);
	// Sample the environment maps:
	//vec3 env = lerp(vec3(0.3,0.3,0.3),vec3(0.8,0.8,0.8),0.5*(1.0+surfaceState.refl.z));//specularCubemap.SampleLevel(cubeSamplerState, ConvertCubemapLookup(surfaceState.refl.xyz), roughness_mip).rgb;

	vec3 env = specularCubemap.SampleLevel(cubeSamplerState, ConvertCubemapLookup(surfaceState.refl.xyz), roughness_mip).rgb;

	//vec3 envSpecularColour = ZiomaEnvBRDFApprox(surfaceProperties.albedo, surfaceProperties.roughness2, surfaceState.n_v);
	vec3 diffuse = surfaceState.kD * surfaceProperties.globalIllumination.rgb * surfaceProperties.albedo.rgb;
	vec3 specular = surfaceState.kS * env;

	return diffuse+specular;
}

vec3 PBRLight(SurfaceState surfaceState, vec3 viewDir,vec3 dir_from_surface_to_light, SurfaceProperties surfaceProperties, vec3 irradiance)
{
	float roughnessL				=min(100.0,max(.0001, surfaceProperties.roughness2));
	float n_l						=saturate(dot(surfaceProperties.normal, dir_from_surface_to_light));
	vec3 halfway					=normalize(-viewDir+dir_from_surface_to_light);
	vec3 refl						=normalize(reflect(viewDir,surfaceProperties.normal));
	float n_h						=saturate(dot(surfaceProperties.normal, halfway));
	float l_h						=saturate(dot(halfway, dir_from_surface_to_light));
	float lightD					=DistributionTerm(roughnessL, n_h);
	float lightV					=VisibilityTerm(roughnessL, l_h);
	// Per-light:
	vec3 diffuse					=surfaceState.kD*irradiance * surfaceProperties.albedo.rgb * saturate(n_l);
	vec3 specular					= irradiance * ( lightD*lightV * surfaceState.kS *n_l);
	//float ao						= SceneAO(pos, normal, localToWorld);
	///	specular						*=surfaceState.kS*saturate(pow(surfaceState.n_v + surfaceProperties.ao, surfaceProperties.roughness2) - 1.0 + surfaceProperties.ao);
	vec3 colour = diffuse+specular;
	//colour *= shadow;
	return colour;
}

vec3 PBRAddLight(SurfaceState surfaceState,vec3 viewDir,SurfaceProperties surfaceProperties,LightTag lightTag)
{
	vec3 diff						=lightTag.position-surfaceProperties.position;
	float dist_to_light				=length(diff);
	float d							=max(0.001,dist_to_light/lightTag.radius);
	float atten						=step(dist_to_light,lightTag.range);
	vec3 irradiance					=lightTag.colour.rgb*lerp(1.0,atten/(d*d),lightTag.is_point);
	vec3 dir_from_surface_to_light	=lerp(-lightTag.direction,normalize(diff),lightTag.is_point);
	vec3 shadow						=vec3(1.0,1.0,1.0);
	vec4 spos						=GetShadowCoord( surfaceProperties.position, lightTag );

	////	if(!(light.is_point*light.is_spot))
	////		shadow=GetVarianceShadow(videoTexture,lightTag,spos);

	if(lightTag.is_spot!=0.0)
		shadow*=GetSpotLighting(lightTag,spos);
	irradiance*=shadow;
	return PBRLight(surfaceState, viewDir, dir_from_surface_to_light,surfaceProperties, irradiance);
} 

// NOTE: This apparently compiles cleanly to insert the vectors as columns contiguously in memory.
// Whereas the mat3() constructor in GLSL does the same, the float3x3 constructor in HLSL tries to insert the vectors as rows, very inefficient.
mat3 CreateMat3FromCols(float3 c0, float3 c1, float3 c2)
{
#ifdef GLSL
    return mat3(c0, c1, c2);
#else
    return mat3(c0.x, c1.x, c2.x,
				c0.y, c1.y, c2.y,
				c0.z, c1.z, c2.z);
#endif
}

vec3 GetNormal(vertexOutput IN,bool normal_map)
{
	vec3 normal;
	if(normal_map)
	{
		vec3 tangentx			=normalize(IN.tangent);
		vec3 tangenty			=normalize(cross(IN.normal, tangentx));
		mat3 TangentMatrix		=CreateMat3FromCols(tangentx, normalize(tangenty), normalize(IN.normal)); //transforms world=>tangent space
		vec3 normalLookup		=normalTexture.Sample(wrapSamplerState, IN.diffuseNormalUV.zw ).xyz;
		normalLookup			=normalOutputScalar.xyz*2.0 * (normalLookup.rgb-vec3(0.5, 0.5, 0.5));
		normal					=normalize(mul(TangentMatrix,normalLookup));
	}
	else 
	{
		normal=IN.normal;
	}
	return normal;
}

vec4 Solid(vertexOutput IN,bool lightmap,bool ambient,bool normal_map,bool do_emissive,int max_lights)
{
	vec3 diff				=IN.wpos.xyz - viewPosition;
	if(length(diff) > drawDistance)
		discard;
	vec3 normal				=GetNormal(IN,normal_map);

	vec4 diffuseColour		=diffuseTexture.Sample(wrapSamplerState,IN.diffuseNormalUV.xy).rgba;
	diffuseColour			=diffuseColour.rgba * diffuseOutputScalar.rgba;
	
	vec3 view				=normalize(diff);
	vec4 combinedLookup		=combinedTexture.Sample(wrapSamplerState, IN.combinedEmissiveUV.xy);
	// GLTF spec for rough-metal textures:  green channel contains roughness values
	//										blue channel contains metalness values
	// 
	// from combinedLookup we will use roughness =offset+multiplier*lookup.g
	//      so we can either have lookup.b= roughness (with offset=0 and multiplier>0),
	//							or lookup.b=smoothness (offset = 1.0 and multiplier <0!
	// this allows us to have either roughness or smoothness textures.
	// So roughMetalOcclusion is now rough-metal-occl-smooth
	// And for GLTF compatibility, we will use combinedTexture g=roughness, b=metalness, a=occlusion
	vec3 roughMetalOcclusion		=combinedOutputScalarRoughMetalOcclusion.rgb*combinedLookup.gba;
	// constant factor:
	roughMetalOcclusion.r			+=combinedOutputScalarRoughMetalOcclusion.a;
	SurfaceProperties surfaceProperties;
	surfaceProperties.position		=IN.wpos;

	surfaceProperties.roughness		=roughMetalOcclusion.r;
	surfaceProperties.metallic		=roughMetalOcclusion.g;
	surfaceProperties.ao			=roughMetalOcclusion.b;

	surfaceProperties.normal		=normal;
	surfaceProperties.albedo		=diffuseColour;
	float alpha						=diffuseColour.a;
	surfaceProperties.roughness2	=surfaceProperties.roughness*surfaceProperties.roughness;
	surfaceProperties.globalIllumination=globalIlluminationTexture.Sample(clampSamplerState,IN.lightmapUV).rgb;

	SurfaceState surfaceState		=PreprocessSurface(view,surfaceProperties);
	//int id						=int(TagDataIDBuffer[0].x);
	//VideoTagDataCube tagData		=TagDataCubeBuffer[id];

	// TODO: This ONLY applies for video lighting!
	//surfaceState.kD				*=tagData.diffuseAmbientScale;
	vec3 c						=vec3(0,0,0);
	if(lightmap)
		c=PBRLightmap(surfaceState, view, surfaceProperties);
	if(ambient)
	{
		c+=PBRDynamic(surfaceState, view, surfaceProperties);
	}
	//c.rgb=surfaceProperties.globalIllumination.rgb;
	//for(int i=0;i<max_lights;i++)
	{
		//if(i>=tagData.lightCount)
			//break;
		//LightTag lightTag	=tagData.lightTags[i];
		//c					+=PBRAddLight(surfaceState,view,surfaceProperties,lightTag);
	}
	if(do_emissive)
	{
		vec3 emissive		=	emissiveTexture.Sample(wrapSamplerState, IN.combinedEmissiveUV.zw * emissiveTexCoordsScale).rgb;
		emissive			*=	emissiveOutputScalar.rgb;
		c					+=emissive;
	}
	vec4 u				=	vec4(c,alpha);
	//if(lightmap)
	//u.rg=lightmapUVs;
//	u.rgb=roughMetalOcclusion.rgb;//vec3(surfaceProperties.roughness,surfaceProperties.metallic,0);
	return u;
}

vec4 Solid_AlbedoOnly(vertexOutput IN)
{
	vec4 diffuseColour	= diffuseTexture.Sample(wrapSamplerState, IN.diffuseNormalUV.xy);
	return diffuseColour;
}

shader vec4 PS_Solid_AlbedoOnly(vertexOutput IN) : SV_TARGET
{
	return Solid_AlbedoOnly(IN);
}

shader vec4 PS_Solid(vertexOutput IN, variant bool lightmap, variant bool ambient, variant bool normal_map, variant bool do_emissive,variant int max_lights) : SV_TARGET
{
	return Solid(IN, lightmap, ambient, normal_map, do_emissive, max_lights);
}

float hash(vec3 p)
{
	vec3 p3 = frac(vec3(p.xyz) * .1031);
	p3 += dot(p3, p3.yzx + 33.33);
	return frac((p3.x + p3.y) * p3.z);
}

shader vec4 PS_Digitizing(vertexOutput IN) : SV_TARGET
{
	vec3 diff = IN.wpos.xyz - viewPosition;
	float dist= length(diff);
	if (dist > drawDistance)
		discard;
	float t = float(frameNumber) * 0.01;

	float scale = 0.1 + 0.2 * perNodeConstants.rezzing;
	vec3 pos = IN.wpos/scale ;
	vec3 mid = pos - frac(pos);
	mid += vec3(0.5, 0.5, 0.5);// vec3(hash(mid), hash(mid * 2), hash(mid * 3));
	float r = 0.1 + sin(t) * 0.3;
	if (perNodeConstants.rezzing > 0.95)
		mid += vec3(0, 0,t);
	vec3 offset = abs(pos - mid);
	float l =min( min(offset.x, offset.y), offset.z);
	float g = exp(-l * 20.0) / (1.0 + perNodeConstants.rezzing);
	return vec4(saturate(dist),g,0,0.5);
}

shader vec4 PS_Solid_LocalHand(vertexOutput IN) : SV_TARGET
{
	float dotp=saturate(IN.normal.z);
	vec3 light=vec3(dotp,dotp,dotp);
	vec3 colour=diffuseOutputScalar.rgb*light;
	colour		+=emissiveOutputScalar.rgb;
	return vec4(colour,1.0);
}

shader vec4 PS_Transparent(vertexOutput IN, variant bool lightmap, variant bool ambient, variant bool normal_map, variant bool do_emissive, variant int max_lights) : SV_TARGET
{
	return Solid(IN, lightmap, ambient, normal_map, do_emissive, max_lights);
}

shader vec4 PS_Depth(vertexOutput IN) : SV_TARGET
{
	vec3 diff = IN.wpos.xyz - viewPosition;
	float d=length(diff);
	if (d > drawDistance)
		discard;
	return vec4(d,d,d,1.0);
}

vec4 DebugNormal(vertexOutput IN, int swizzle_mode)
{
	vec3 diff = IN.wpos.xyz - viewPosition;
	if (length(diff) > drawDistance)
		discard;

	vec3 tangentx		=normalize(IN.tangent);
	vec3 tangenty		=normalize(cross(IN.normal, tangentx));
	mat3 TangentMatrix	=CreateMat3FromCols(tangentx, normalize(tangenty), normalize(IN.normal)); //transforms world=>tangent space
	vec3 normalLookup	=normalTexture.Sample(wrapSamplerState, IN.diffuseNormalUV.zw ).xyz;
	normalLookup		=normalOutputScalar.xyz*2.0 * (normalLookup.rgb-vec3(0.5, 0.5, 0.5));
	vec3 normal			=normalize(mul(TangentMatrix,normalLookup));

	return vec4(normal.xyz, 1.0f); 
}

shader vec4 PS_DebugNormals(vertexOutput IN) : SV_TARGET
{
	return DebugNormal(IN, 0);
}

shader vec4 PS_DebugNormal_VertexNormals(vertexOutput IN) : SV_TARGET
{
	return vec4(0.1,0.1,0.1,0)+vec4(IN.normal.xyz, 1.0f);
}

shader vec4 PS_Debug_SurfaceFresnel(vertexOutput IN) : SV_TARGET
{
return vec4(0.1,0.1,0.1,0);
}

shader vec4 PS_Debug_SurfaceKS(vertexOutput IN) : SV_TARGET
{
return vec4(0.1,0.1,0.1,0);
}

shader vec4 PS_Debug_SurfaceKD(vertexOutput IN) : SV_TARGET
{
return vec4(0.1,0.1,0.1,0);
}

shader vec4 PS_Debug_SurfaceRefl(vertexOutput IN) : SV_TARGET
{
return vec4(0.1,0.1,0.1,0);
}





shader vec4 PS_Debug_UVs(vertexOutput IN) : SV_TARGET
{
	vec2 uv=frac(IN.diffuseNormalUV.xy);
	uv		+=frac(10.0*IN.diffuseNormalUV.xy);
	return vec4(0.5*uv,0, 1.0f);
}
shader vec4 PS_Local(vertexOutput IN) : SV_TARGET
{
	vec4 clr=lerp(vec4(0.25,0.25,0.25,1.0),vec4(1.0,1.0,1.0,1.0),0.5*IN.normal.z+0.5);
//clr.rgb *= step(0.06,IN.debug_colour.g)*saturate(10.0*IN.debug_colour.rgb);
	return clr;
}


shader vec4 PS_DebugAnim(vertexOutput IN):SV_TARGET
{
	return vec4(1.0,0,0,1.0);
}

shader vec4 PS_DebugLightmaps(vertexOutput IN) : SV_TARGET
{
	vec3 diff = IN.wpos.xyz - viewPosition;
	float dist = length(diff);
	//if (dist > drawDistance)
	//	discard;

	vec3 view = normalize(diff);
	SurfaceProperties surfaceProperties;
	surfaceProperties.position = IN.wpos;

	surfaceProperties.roughness = 0;
	surfaceProperties.metallic = 0;
	surfaceProperties.ao = 1.0;

	surfaceProperties.normal = IN.normal;
	surfaceProperties.albedo = vec4(1.0,1.0,1.0,1.0);
	float alpha = 1.0;
	surfaceProperties.roughness2 = 0;
	vec2 lightmapUV=vec2(IN.lightmapUV.x,IN.lightmapUV.y);

	surfaceProperties.globalIllumination = globalIlluminationTexture.Sample(clampSamplerState, lightmapUV).rgb;
	
	SurfaceState surfaceState = PreprocessSurface(view, surfaceProperties);
	vec3 c = PBRLightmap(surfaceState, view, surfaceProperties);
	c*=saturate(0.2*dist);
	return vec4(c,1.0);
}

shader vec4 PS_DebugAmbient(vertexOutput IN) : SV_TARGET
{
	vec3 diff = IN.wpos.xyz - viewPosition;
	if (length(diff) > drawDistance)
		discard;
	vec3 view = normalize(diff);
	SurfaceProperties surfaceProperties;
	surfaceProperties.position = IN.wpos;
	surfaceProperties.roughness = 1.0;
	surfaceProperties.metallic = 0.0;
	surfaceProperties.ao = 1.0;
	surfaceProperties.normal = IN.normal;
	surfaceProperties.albedo = vec4(1.0,1.0,1.0,1.0);
	surfaceProperties.roughness2 = 1.0;
	surfaceProperties.globalIllumination = vec3(0,0,0);
	SurfaceState surfaceState = PreprocessSurface(view, surfaceProperties);
	vec4 clr;
	clr.rgb=PBRDynamic(surfaceState, view, surfaceProperties);
	clr.a=1.0;
	return clr;
}

VertexShader vs_variants = CompileShader(vs_6_1, VS_Variants());
VertexShader vs_variants_mv = CompileShader(vs_6_1, VS_Variants_MV());

VertexShader vs_debug_anim						= CompileShader(vs_6_0,VS_DebugAnimation());

PixelShader ps_solid							= CompileShader(ps_6_0, PS_Solid());
PixelShader ps_digitizing						= CompileShader(ps_6_0, PS_Digitizing());


PixelShader ps_transparent						= CompileShader(ps_6_0, PS_Transparent());

PixelShader ps_local_hand						= CompileShader(ps_6_0, PS_Solid_LocalHand());
PixelShader ps_depth							= CompileShader(ps_6_0, PS_Depth());

//Debug renders.
PixelShader ps_solid_albedo_only				= CompileShader(ps_6_0, PS_Solid_AlbedoOnly());				// Albedo only view
PixelShader ps_debug_normals					= CompileShader(ps_6_0, PS_DebugNormals());					// Normal view
PixelShader ps_debug_anim						= CompileShader(ps_6_0, PS_DebugAnim());					// Unreal-basis normal viewdebug_lightmaps
PixelShader ps_debug_lightmaps					= CompileShader(ps_6_0, PS_DebugLightmaps());				// Unreal-basis normal view
PixelShader ps_debug_ambient					= CompileShader(ps_6_0, PS_DebugAmbient());					// Realtime ambient lighting
PixelShader ps_debug_normal_vertexnormals		= CompileShader(ps_6_0, PS_DebugNormal_VertexNormals());	// Vertex normals

PixelShader ps_debug_uvs						= CompileShader(ps_6_0, PS_Debug_UVs());


PixelShader ps_debug_surface_fresnel			= CompileShader(ps_6_0, PS_Debug_SurfaceFresnel());
PixelShader ps_debug_surface_ks					= CompileShader(ps_6_0, PS_Debug_SurfaceKS());
PixelShader ps_debug_surface_kd					= CompileShader(ps_6_0, PS_Debug_SurfaceKD());
PixelShader ps_debug_surface_refl				= CompileShader(ps_6_0, PS_Debug_SurfaceRefl());

PixelShader ps_local							= CompileShader(ps_6_0, PS_Local());
RasterizerState PbrBackfaceCull
{
	FillMode				= SOLID;
	CullMode				= back;
	FrontCounterClockwise	= false;
};

RasterizerState PbrDontCull
{
	FillMode				= SOLID;
	CullMode				= none;
	FrontCounterClockwise	= false;
};

technique solid
{
	pass pbr
	{
		SetDepthStencilState(ReverseDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF ); 
		SetVertexShaderVariants(vs_variants({false,true},{false,true},{0,1,2},{false,true},{false,true},{false,true})
								,vs_variants_mv({false,true},{false,true},{0,1,2},{false,true},{false,true},{false,true}));
		SetGeometryShader(NULL);
		SetPixelShaderVariants(ps_local, ps_solid({false, true}, {false, true}, {false, true}, {false, true}, {0}), ps_digitizing, ps_solid_albedo_only, ps_depth, ps_debug_normals
				,ps_debug_lightmaps,ps_debug_ambient,ps_debug_normal_vertexnormals,ps_debug_uvs,ps_local_hand
				,ps_debug_surface_fresnel,ps_debug_surface_ks,ps_debug_surface_kd,ps_debug_surface_refl);
	}
}

technique transparent
{
	pass pbr
	{
		SetDepthStencilState(TestReverseDepth,0);
		SetBlendState(AlphaBlend, float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);
		SetVertexShaderVariants(vs_variants({false,true},{false,true},{0,1,2},{false,true},{false,true},{false,true})
								,vs_variants_mv({false,true},{false,true},{0,1,2},{false,true},{false,true},{false,true}));
		SetGeometryShader(NULL);
		SetPixelShaderVariants(ps_transparent({false, true}, {false, true}, {false, true}, {false, true}, {0}), ps_digitizing
				,ps_solid_albedo_only, ps_depth, ps_debug_normals, ps_debug_lightmaps, ps_debug_ambient
				,ps_debug_normal_vertexnormals, ps_debug_uvs, ps_local_hand
				,ps_debug_surface_fresnel,ps_debug_surface_ks,ps_debug_surface_kd,ps_debug_surface_refl);
	}
}

technique skeleton
{
	pass bones
	{
		SetRasterizerState( wireframeRasterizer );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlend, vec4(0.0,0.0,0.0,0.0), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(vs_debug_anim);
		SetPixelShader(ps_debug_anim);
	}
}